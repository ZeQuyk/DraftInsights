@page "/draft"
@page "/draft/{draftYear:int}"
@using DraftInsights.Core.Models;
@using DraftInsights.NHLApi.Models;
@using DraftInsights.Web.Components;

@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager;
@inject DraftInsights.NHLApi.Services.INHLService NhlService;

<PageTitle>@DraftYear NHL Draft</PageTitle>

<MudItem Class="d-flex justify-space-around flex-grow-1 gap-3">
    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowBack" Href="@PreviousDraftLink" Title="@((DraftYear - 1).ToString())" Disabled="@string.IsNullOrEmpty(PreviousDraftLink)" />
    <MudText Typo="Typo.h4">@DraftYear NHL Draft</MudText>
    <MudIconButton Color="Color.Primary" Icon="@Icons.Material.Filled.ArrowForward" Href="@NextDraftLink" Title="@((DraftYear + 1).ToString())" Disabled="@string.IsNullOrEmpty(NextDraftLink)" />
</MudItem>


<MudTable Items="@draftPicks" T="DraftPickInformation" Breakpoint="Breakpoint.None" Dense @ref=@Table OnRowClick="OnRowClick">
    <HeaderContent>
        <MudTh>Round</MudTh>
        <MudTh>Pick #</MudTh>
        <MudTh>Drafted By</MudTh>
        <MudTh>Player</MudTh>
        <MudTh>Position</MudTh>
        <MudTh>Amateur Team</MudTh>
        <MudTh>Games played</MudTh>
        <MudTh>Goals</MudTh>
        <MudTh>Assists</MudTh>
        <MudTh>Points</MudTh>
    </HeaderContent>
    <RowTemplate> 
            <MudTd><MudText>@context.Pick.RoundNumber</MudText></MudTd>
            <MudTd><MudText>@context.Pick.OverallPickNumber</MudText></MudTd>
            <MudTd>
                <MudText>
                    <NhlTeamLogo TeamId="@context.Pick.DraftedByTeamId" Alt="@context.Pick.TriCode"/> @GetTeamString(context.Pick)
                </MudText>
            </MudTd>
            <MudTd><a href="@context.Url"><MudText>@context.Pick.PlayerName</MudText></a></MudTd>
            <MudTd><MudText>@context.Pick.Position</MudText></MudTd>
            <MudTd><MudText>@context.Pick.AmateurClubName (@context.Pick.AmateurLeague)</MudText></MudTd>
            <MudTd><MudText>@context.PlayerStats?.Games</MudText></MudTd>
            <MudTd><MudText>@context.PlayerStats?.Goals</MudText></MudTd>
            <MudTd><MudText>@context.PlayerStats?.Assists</MudText></MudTd>
            <MudTd><MudText>@context.PlayerStats?.Points</MudText></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager HideRowsPerPage/>
    </PagerContent>    
</MudTable>

@code {
    private string PreviousDraftLink => DraftYear.HasValue ? $"/draft/{DraftYear.Value - 1}" : string.Empty;

    private string NextDraftLink => DraftYear.HasValue && DraftYear.Value + 1 <= MostRecentDraftYear ? $"/draft/{DraftYear.Value + 1}" : string.Empty;

    private int MostRecentDraftYear = 2022;

    private List<DraftPickInformation> draftPicks = new List<DraftPickInformation>();

    private MudTable<DraftPickInformation>? Table;

    [Parameter]
    public int? DraftYear { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {            
            // https://github.com/MudBlazor/MudBlazor/issues/4580
            Table?.SetRowsPerPage(32);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        DraftYear ??= MostRecentDraftYear;
    }

    protected override Task OnParametersSetAsync()
    {
        _ = InitializeDraftAsync();

        return base.OnParametersSetAsync();
    }

    private async Task SetPlayerStats()
    {
        foreach (var pick in draftPicks)
        {
            try
            {
                if (pick.Id != default)
                {
                    var response = await NhlService.GetPlayersStatsAsync(pick.Id, StatsTypes.CareerRegularSeason);
                    pick.PlayerStats = response?.FirstOrDefault()?.Splits?.FirstOrDefault()?.Stat;
                    StateHasChanged();
                }
            }
            catch
            {
            }
        }
    }

    private void OnRowClick(TableRowClickEventArgs<DraftPickInformation> playerClicked)
    {
        if (playerClicked.Item.Id == default)
        {
            return;
        }

        NavigationManager.NavigateTo($"/{playerClicked.Item.Url}");
    }

    private string GetTeamString(DraftPick pick)
    {
        var text = pick.TriCode;
        if (!string.IsNullOrEmpty(pick.PickOriginallyFrom) && !pick.TriCode.Equals(pick.PickOriginallyFrom, StringComparison.InvariantCultureIgnoreCase))
        {
            text += $" via {pick.PickOriginallyFrom}";
        }

        return text;
    }

    private async Task InitializeDraftAsync()
    {
        DraftYear ??= MostRecentDraftYear;
        draftPicks = new List<DraftPickInformation>();
        var draft = await NhlService.GetDraftAsync(DraftYear.Value);
        if (draft is null)
        {
            return;
        }

        foreach (var p in draft.Picks)
        {
            var playerId = p.PlayerId;
            var draftPickInformation = new DraftPickInformation(p);
            draftPicks.Add(draftPickInformation);
        }

        Table?.SetRowsPerPage(draftPicks.Count / draftPicks.Max(p => p.Pick.RoundNumber));
        _ = SetPlayerStats();
    }
}
