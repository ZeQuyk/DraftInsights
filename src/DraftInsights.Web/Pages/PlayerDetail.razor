@page "/player/{playerId:int}"
@using DraftInsights.Core.Models;
@using DraftInsights.NHLApi.Models;

@inject DraftInsights.NHLApi.Services.INHLService NhlService;

<PageTitle>@PlayerName Career Stats</PageTitle>

<MudCard Elevation="10" Class="mb-3">
    <MudCardContent>
        <MudText Typo="Typo.h3" Align="Align.Center">
            <MudAvatar Elevation="10" Style="height:136px;width:136px;">
                <MudImage Src="@playerInformation?.AvatarUrl" Alt="@PlayerName" />
            </MudAvatar>
            <br />
            @PlayerName @DisplayPlayerNumber()
        </MudText>
        @if (playerInformation?.Player is not null)
        {
            <MudText Align="Align.Center">
                @playerInformation.Player.PrimaryPosition?.Name
            </MudText>
        }
    </MudCardContent>
</MudCard>

<MudTable T="Split" Items="@playerInformation?.Stats?.Splits" Dense Breakpoint="Breakpoint.None" Elevation="10">
    <HeaderContent>
        <MudTh>Year</MudTh>
        <MudTh>League</MudTh>
        <MudTh>Team</MudTh>
        <MudTh>Games</MudTh>
        <MudTh>Goals</MudTh>
        <MudTh>Assists</MudTh>
        <MudTh>Points</MudTh>
        <MudTh>Plus/Minus</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@DisplaySeason(context.Season)</MudTd>
        <MudTd>@context?.League?.Name</MudTd>
        <MudTd>@context?.Team?.Name</MudTd>
        <MudTd>@context?.Stat?.Games</MudTd>
        <MudTd>@context?.Stat?.Goals</MudTd>
        <MudTd>@context?.Stat?.Assists</MudTd>
        <MudTd>@context?.Stat?.Points</MudTd>
        <MudTd>@context?.Stat?.PlusMinus</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private PlayerInformation? playerInformation;

    [Parameter]
    [SupplyParameterFromQuery(Name = "name")]
    public string? PlayerName { get; set; }

    [Parameter]
    public int? PlayerId { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var statsResponse = await NhlService.GetPlayersStatsAsync(PlayerId.GetValueOrDefault(), StatsTypes.YearByYear);
        var playerDetail = await NhlService.GetPlayerDetailAsync(PlayerId.GetValueOrDefault());

        playerInformation = new PlayerInformation
            {
                Stats = statsResponse?.FirstOrDefault(),
                Player = playerDetail,
            };

        PlayerName = playerInformation?.FullName ?? PlayerName;
        await base.OnInitializedAsync();
    }

    private string? DisplayPlayerNumber()
    {
        if (string.IsNullOrEmpty(playerInformation?.Player?.PrimaryNumber))
        {
            return null;
        }

        return $"#{playerInformation.Player.PrimaryNumber}";
    }

    private string? DisplaySeason(string? season)
    {
        if (string.IsNullOrEmpty(season))
        {
            return null;
        }

        return season.Insert(season.Length / 2, "-");
    }
}
