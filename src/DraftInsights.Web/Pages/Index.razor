@page "/"
@using DraftInsights.Core.Models;

@inject DraftInsights.Core.Services.ILotterySimulatorService LotteryService;

<PageTitle>Draft lottery simulator</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Draft lottery simulator</MudText>
<MudButton OnClick="SimulateDraftAsync">Simulate</MudButton>
<MudButton OnClick="ResetDraftAsync">Reset</MudButton>
<MudTable Items="@draftPositions" T="DraftPosition" Breakpoint="Breakpoint.None">
    <HeaderContent>
        <MudTh>Position</MudTh>
        <MudTh>Team</MudTh>
        <MudTh>Odds</MudTh>
        <MudTh>Record</MudTh>
        <MudTh>Points</MudTh>
        <MudTh>Points %</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudGrid>
                <MudItem xs="6">
                    <MudText>
                        @context.Position
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    @if (context.PositionDifference > 0)
                    {
                        <MudText Color="Color.Success">+@context.PositionDifference</MudText>
                    }
                    else if (context.PositionDifference < 0)
                    {
                        <MudText Color="Color.Error">@context.PositionDifference</MudText>
                    }
                </MudItem>               
            </MudGrid>           
        </MudTd>
        <MudTd>
            <MudImage Src="@context.TeamRecord.Team!.LogoUrl" Height="30" Width="30" Style="vertical-align: middle; display: inline-block;"></MudImage>
            @context.TeamRecord.Team!.Name       
        </MudTd>
        <MudTd>@((context.Odds * 100).ToString("0.0"))%</MudTd>
        <MudTd>@context.TeamRecord.LeagueRecord!.ToString()</MudTd>
        <MudTd>@context.TeamRecord.Points</MudTd>
        <MudTd>@context.TeamRecord.PointsPercentage.ToString("0.000")</MudTd>
    </RowTemplate>
</MudTable>

@code {
    private List<DraftPosition> draftPositions = new List<DraftPosition>();

    protected async override Task OnInitializedAsync()
    {
        await ResetDraftAsync();

        await base.OnInitializedAsync();
    }

    private async Task SimulateDraftAsync()
    {
        draftPositions = await LotteryService.ComputeDraftOrderAsync();
    }

    private async Task ResetDraftAsync()
    {
        draftPositions = await LotteryService.GetInitialDraftOrderAsync();
    }
}